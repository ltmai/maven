<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.mai</groupId>
	<artifactId>wildfly.test</artifactId>
	<version>1.0-SNAPSHOT</version>

    <!-- Example commands:

        mvn wildfly:start       start wildfly
        mvn wildfly:shutdown    stop wildfly
        mvn wildfly:deploy      deploy a given WAR to wildfly
        mvn wildfly:undeploy    undeploy a given WAR in wildfly
        mvn test                run the goal wildfly:execute-commands (registered to test phase, see <executions>)

        For remote wildfly, instead of specifying wildfly username and password directly in the pom.xml, <servers> section 
        can be defined in the maven settings.xml to store the credentials as follows:
    
            <servers>
                <server>
                    <id>remote-wildfly-dev</id>
                    <username>admin</username>
                    <password>secret</password>
                </server>
            </servers>

        The host name and the port number still needs to be configured in pom.xml.
        The server can be refered in pom.xml as in following example:

            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>
                <configuration>
                    <id>remote-wildfly-dev</id>
                    <hostname>192.168.10.10</hostname>
                    <port>9990</port>
                </configuration>
            </plugin>

        For local wildfly no username and password are required. However the path to local wildfly installation directory
        is needed to start and shutdown:
        
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>
                <configuration>
                    <jbossHome>C:\bin\wildfly-16.0.0.Final</jbossHome>
                    <port>9990</port>
                </configuration>
            </plugin>
            
        Example configuration:
        The goal wildlfy:start has the following parameters among each others:
            jbossHome (String): The WildFly Application Server's home directory. If not used, WildFly will be downloaded.
                User property is: jboss-as.home.
                    User can define a property jboss-as.home as follows:
                    <properties>
                        <jboss-as.home>C:\dev\wildfly</jboss-as.home>
                    </properties>
                Alias is: jboss-home.
                    User can also specify parameter value as <jboss-home> in <configuration>:
                    <configuration>
                        <jboss-home>C:\dev\wildlfy</jboss-home>
                    </configuration>
    -->

    <properties>
        <version.wildfly.maven.plugin>2.0.1.Final</version.wildfly.maven.plugin>
        <!-- the following are wildfly user properties as in
          https://docs.jboss.org/wildfly/plugins/maven/latest/start-mojo.html 
          Goal wildfly:start requires a parameter "jbossHome", whose:
          - User property is: jboss-as.home
          - Alias is: jboss-home
          Meaning: we can define an user property <jboss-as.home> here or as
          <jbossHome> element in the plugin's <configuration>. 
          <jbossHome> is optional, it not used, WildFly will be downloaded. -->
        <jboss-as.home>C:\bin\wildfly-16.0.0.Final</jboss-as.home>
        <wildfly.port>9990</wildfly.port>
        <wildfly.startupTimeout>300</wildfly.startupTimeout>
        <wildfly.timeout>120</wildfly.timeout>
        <wildfly.stdout>none</wildfly.stdout>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>
                
                <!-- for configuration see the parameters of goals found at
                  https://docs.jboss.org/wildfly/plugins/maven/latest/plugin-info.html 
                  
                  for example, the goal wildfly:deploy supports following parameters
                  (https://docs.jboss.org/wildfly/plugins/maven/latest/deploy-mojo.html)
                  - authenticationConfig (User property is: wildfly.authConfig. Alias is: authentication-config.)
                  - checkPackaging (User property is: wildfly.checkPackaging. Alias is: check-packaging.)
                  - filename (User property is: wildfly.deployment.filename.)
                  - force (Default value is: true. User property is: deploy.force.)
                  - hostname (Default value is: localhost. User property is: wildfly.hostname.)
                  - name (User property is: wildfly.deployment.name.) 
                  - id (User property is: wildfly.id.)
                  - password (User property is: wildfly.password.)
                  - port (Default value is: 9990. User property is: wildfly.port.)
                  - ...
                  Parameters that are defined here are shared among <execution>s.
                  <execution>s can also define parameters within their own <configration>. -->
                <configuration>
                    <!-- parameters for wildfly:deploy, the filename property does have a default of 
                      ${project.build.finalName}.${project.packaging}. The default value is not 
                      injected as it normally would be due to packaging types like ejb that result 
                      in a file with a .jar extension rather than an .ejb extension. -->
                </configuration>
                
                <!-- register goal wildfly:execute-commands in phase test -->
                <executions>
                    <execution>
                        <id>Read Wildfly start time for fun</id>
                        <phase>test</phase>
                        <goals>
                            <goal>execute-commands</goal>
                        </goals>
                        <configuration>
                            <commands>
                                <command>/core-service=platform-mbean/type=runtime/:read-attribute(name=start-time)</command>
                            </commands>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>